window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<h1 id=\"robotics-maze-escape\">Robotics Maze Escape</h1>\n\n<p><img src=\"./docs/images/robotics-maze-escape.png\" alt=\"Robotics Maze Escape\" width=\"400\" style=\"display: block; margin: auto;\"></p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>This project implements a maze escape algorithm for a mobile robot using the Robot Operating System (ROS). The robot is equipped with a laser scanner, and it uses several search algorithm to find the shortest path to the goal while avoiding obstacles. The project also includes a simulation environment using Gazebo and RViz.</p>\n\n<p>All of the code is written in Python, and it is designed to be modular and easy to understand. The project is structured in a way that allows for easy extension and modification.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<p>The project resolves the three main aspects of a robotics maze escape problem:</p>\n\n<ol>\n<li><p><strong>Localization</strong>: The robot uses a laser scanner to detect obstacles and determine its position in the maze.</p></li>\n<li><p><strong>Global Path Planning</strong>: The robot uses a search algorithm to find the shortest path to the goal while avoiding obstacles. The algorithms implemented include:</p>\n\n<ul>\n<li>Breadth-First Search (BFS)</li>\n<li>Depth-First Search (DFS)</li>\n<li>Dijkstra's Algorithm</li>\n<li>A* Search Algorithm, with the following heuristics:\n<ul>\n<li>Manhattan Distance</li>\n<li>Euclidean Distance</li>\n</ul></li>\n</ul></li>\n<li><p><strong>Local Path Planning</strong>: The robot uses a local path planning algorithm to navigate through the maze and follow the global path. The local path planning algorithm is based on forward simulation. This algorithm is in charge of sending velocity commands to the robot.</p></li>\n</ol>\n\n<h2 id=\"running-the-project\">Running the Project</h2>\n\n<p>To run the project, Python3 and ROS v1 (Noetic) is needed. The project relies on the Python package <code>rospy</code> and other packages which are installed with ROS. Moreover, the project uses several Python packages, that can be installed using <code>pip</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>-r<span class=\"w\"> </span>requirements.txt\n</code></pre>\n</div>\n\n<p>To run the project, once it's downloaded and indexed by ROS, use the following command:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>roslaunch<span class=\"w\"> </span>robotics-maze-escape<span class=\"w\"> </span>launch_simulation.launch<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>enable_plotting:<span class=\"o\">=</span>&lt;<span class=\"nb\">true</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>false&gt;<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>goal:<span class=\"o\">=</span>&lt;<span class=\"m\">1</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>global_planner_algorithm:<span class=\"o\">=</span>&lt;bfs<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>dfs<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>astar<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>dijkstra&gt;<span class=\"w\"> </span><span class=\"se\">\\</span>\n<span class=\"w\">    </span>global_planner_heuristic:<span class=\"o\">=</span>&lt;manhattan<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>euclidean&gt;<span class=\"w\"> </span><span class=\"se\">\\</span>\n</code></pre>\n</div>\n\n<p>The <code>global_planner_heuristic</code> parameter is only used if the <code>global_planner_algorithm</code> is set to <code>astar</code>. The <code>goal</code> parameter allows you to choose between two different goals in the maze, <code>1</code> refering to the bottom left corner and <code>2</code> to the top right corner. The <code>enable_plotting</code> parameter allows you to enable or disable plotting using Matplotlib.</p>\n\n<p>Once the simulation is running, you can visualize the robot's position and the maze in RViz. The robot will start navigating through the maze, following the global path and avoiding obstacles.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>The project is documented using Python docstrings. You can find the documentation in the <code>docs</code> folder, as a navigable HTML page. Simply open <code>docs/index.html</code> in your web browser to view the documentation.</p>\n\n<p>To generate the documentation, the following command can be used:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">PYTHONPATH</span><span class=\"si\">}</span>:./src<span class=\"w\"> </span>pdoc<span class=\"w\"> </span>src<span class=\"w\"> </span>-o<span class=\"w\"> </span>./docs<span class=\"w\"> </span>--docformat<span class=\"w\"> </span>google\n</code></pre>\n</div>\n\n<h2 id=\"final-remarks\">Final Remarks</h2>\n\n<p>This project was done in an academic environment, as part of the curriculum of <strong>Mobile Robotics</strong> and <strong>Service and Object-Oriented Algorithms in Robotics</strong> from <strong>University of Applied Sciences Technikum Wien (UASTW)</strong>. The project was carried out by:</p>\n\n<ul>\n<li><a href=\"https://github.com/alejofl\">Alejo Flores Lucey</a> (ID: if24x390)</li>\n<li><a href=\"https://github.com/mauritobaez\">Mauro Leandro Baez</a> (ID: se24m502)</li>\n</ul>\n"}, {"fullname": "src.custom_types", "modulename": "src.custom_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.custom_types.Map", "modulename": "src.custom_types", "qualname": "Map", "kind": "class", "doc": "<p>Represents a map with its dimensions, origin, resolution, and the map data itself.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>width (int):</strong>  The width of the map in pixels.</li>\n<li><strong>height (int):</strong>  The height of the map in pixels.</li>\n<li><strong>origin (Tuple[float, float]):</strong>  The origin coordinates of the map in world coordinates (x, y).</li>\n<li><strong>resolution (float):</strong>  The resolution of the map in pixels per meter.</li>\n<li><strong>map (np.ndarray):</strong>  The map data as a 2D numpy array, where each element represents a cell in the map.</li>\n<li><strong>costmap (np.ndarray, optional):</strong>  An optional costmap for the map, used for obstacle avoidance. Created using a gaussian filter.</li>\n</ul>\n"}, {"fullname": "src.custom_types.Map.__init__", "modulename": "src.custom_types", "qualname": "Map.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">costmap</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.custom_types.Map.width", "modulename": "src.custom_types", "qualname": "Map.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.custom_types.Map.height", "modulename": "src.custom_types", "qualname": "Map.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.custom_types.Map.origin", "modulename": "src.custom_types", "qualname": "Map.origin", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Tuple[float, float]"}, {"fullname": "src.custom_types.Map.resolution", "modulename": "src.custom_types", "qualname": "Map.resolution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.custom_types.Map.map", "modulename": "src.custom_types", "qualname": "Map.map", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "src.custom_types.Map.costmap", "modulename": "src.custom_types", "qualname": "Map.costmap", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray", "default_value": "None"}, {"fullname": "src.custom_types.Point", "modulename": "src.custom_types", "qualname": "Point", "kind": "class", "doc": "<p>Represents a point in 2D space with x and y coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  The x coordinate of the point.</li>\n<li><strong>y (float):</strong>  The y coordinate of the point.</li>\n</ul>\n"}, {"fullname": "src.custom_types.Point.__init__", "modulename": "src.custom_types", "qualname": "Point.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "src.custom_types.Point.x", "modulename": "src.custom_types", "qualname": "Point.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.custom_types.Point.y", "modulename": "src.custom_types", "qualname": "Point.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.custom_types.MapPoint", "modulename": "src.custom_types", "qualname": "MapPoint", "kind": "class", "doc": "<p>Represents a point in the map with x and y coordinates, and a wall indicator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>wall (bool):</strong>  Indicates whether the point is a wall or not.</li>\n</ul>\n", "bases": "Point"}, {"fullname": "src.custom_types.MapPoint.__init__", "modulename": "src.custom_types", "qualname": "MapPoint.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">wall</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "src.custom_types.MapPoint.wall", "modulename": "src.custom_types", "qualname": "MapPoint.wall", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "src.custom_types.CostmapMapPoint", "modulename": "src.custom_types", "qualname": "CostmapMapPoint", "kind": "class", "doc": "<p>Represents a point in the costmap with x and y coordinates, and a cost value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cost (float):</strong>  The cost associated with the point.</li>\n</ul>\n", "bases": "Point"}, {"fullname": "src.custom_types.CostmapMapPoint.__init__", "modulename": "src.custom_types", "qualname": "CostmapMapPoint.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">cost</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "src.custom_types.CostmapMapPoint.cost", "modulename": "src.custom_types", "qualname": "CostmapMapPoint.cost", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.custom_types.Pose", "modulename": "src.custom_types", "qualname": "Pose", "kind": "class", "doc": "<p>Represents a pose in 2D space with x, y coordinates and orientation theta.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>theta (float):</strong>  The orientation of the pose in radians.</li>\n</ul>\n", "bases": "Point"}, {"fullname": "src.custom_types.Pose.__init__", "modulename": "src.custom_types", "qualname": "Pose.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "src.custom_types.Pose.theta", "modulename": "src.custom_types", "qualname": "Pose.theta", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.emission", "modulename": "src.emission", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.emission.Emitter", "modulename": "src.emission", "qualname": "Emitter", "kind": "class", "doc": "<p>Abstract base class for emitting messages to ROS topics.\nThis class provides a template for creating emitters that publish messages\nto specific ROS topics with a defined message type.\nIt requires subclasses to implement the <code>emit</code> method, which is responsible\nfor publishing the data to the specified topic.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.emission.Emitter.publisher", "modulename": "src.emission", "qualname": "Emitter.publisher", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.emission.Emitter.emit", "modulename": "src.emission", "qualname": "Emitter.emit", "kind": "function", "doc": "<p>Emit data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  The data to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.emission.GlobalPlanEmmiter", "modulename": "src.emission", "qualname": "GlobalPlanEmmiter", "kind": "class", "doc": "<p>Emitter for global plan messages.\nThis class inherits from the Emitter base class and is responsible for\npublishing global path messages to the ROS topic <code>/maze_escape/global_plan</code>.\nIt formats the data as a <code>nav_msgs/Path</code> message.</p>\n", "bases": "Emitter"}, {"fullname": "src.emission.GlobalPlanEmmiter.emit", "modulename": "src.emission", "qualname": "GlobalPlanEmmiter.emit", "kind": "function", "doc": "<p>Emit data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  The data to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.emission.RobotMovementEmitter", "modulename": "src.emission", "qualname": "RobotMovementEmitter", "kind": "class", "doc": "<p>Emitter for robot movement commands.\nThis class inherits from the Emitter base class and is responsible for\npublishing movement commands to the ROS topic <code>/cmd_vel</code>.\nIt formats the data as a <code>geometry_msgs/Twist</code> message.</p>\n", "bases": "Emitter"}, {"fullname": "src.emission.RobotMovementEmitter.emit", "modulename": "src.emission", "qualname": "RobotMovementEmitter.emit", "kind": "function", "doc": "<p>Emit data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  The data to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.emission.GoalPoseEmitter", "modulename": "src.emission", "qualname": "GoalPoseEmitter", "kind": "class", "doc": "<p>Emitter for goal pose messages.\nThis class inherits from the Emitter base class and is responsible for\npublishing goal pose messages to the ROS topic <code>/maze_escape/goal_pose</code>.\nIt formats the data as a <code>geometry_msgs/PoseStamped</code> message.</p>\n", "bases": "Emitter"}, {"fullname": "src.emission.GoalPoseEmitter.emit", "modulename": "src.emission", "qualname": "GoalPoseEmitter.emit", "kind": "function", "doc": "<p>Emit data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  The data to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.emission.TrajectoryEmitter", "modulename": "src.emission", "qualname": "TrajectoryEmitter", "kind": "class", "doc": "<p>Emitter for trajectory messages.\nThis class inherits from the Emitter base class and is responsible for \npublishing trajectory messages to the ROS topic <code>/maze_escape/trajectory</code>.\nIt formats the data as a <code>nav_msgs/Path</code> message.</p>\n", "bases": "Emitter"}, {"fullname": "src.emission.TrajectoryEmitter.emit", "modulename": "src.emission", "qualname": "TrajectoryEmitter.emit", "kind": "function", "doc": "<p>Emit data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (Any):</strong>  The data to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning", "modulename": "src.global_planning", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.global_planning.GOAL_POSITIONS", "modulename": "src.global_planning", "qualname": "GOAL_POSITIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)], [(26, 19), (26, 20), (26, 21), (26, 22), (26, 23), (26, 24), (26, 25)]]"}, {"fullname": "src.global_planning.Node", "modulename": "src.global_planning", "qualname": "Node", "kind": "class", "doc": "<p>Node class representing a position in the map.\nEach node has an x and y coordinate, and a parent node for path reconstruction.</p>\n"}, {"fullname": "src.global_planning.Node.__init__", "modulename": "src.global_planning", "qualname": "Node.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">global_planning</span><span class=\"o\">.</span><span class=\"n\">Node</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.global_planning.Node.x", "modulename": "src.global_planning", "qualname": "Node.x", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.global_planning.Node.y", "modulename": "src.global_planning", "qualname": "Node.y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.global_planning.Node.parent", "modulename": "src.global_planning", "qualname": "Node.parent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.global_planning.Node", "default_value": "None"}, {"fullname": "src.global_planning.Node.manhattan_distance", "modulename": "src.global_planning", "qualname": "Node.manhattan_distance", "kind": "function", "doc": "<p>Calculate the Manhattan distance from the current node to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The Manhattan distance to the goal position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.Node.euclidean_distance", "modulename": "src.global_planning", "qualname": "Node.euclidean_distance", "kind": "function", "doc": "<p>Calculate the Euclidean distance from the current node to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The Euclidean distance to the goal position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.PrioritizedNode", "modulename": "src.global_planning", "qualname": "PrioritizedNode", "kind": "class", "doc": "<p>PrioritizedNode class for A* algorithm.\nThis class extends the Node class and adds priority and cost attributes for pathfinding.\nIt is used to prioritize nodes based on their cost and heuristic value.</p>\n"}, {"fullname": "src.global_planning.PrioritizedNode.__init__", "modulename": "src.global_planning", "qualname": "PrioritizedNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">cost</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">global_planning</span><span class=\"o\">.</span><span class=\"n\">Node</span></span>)</span>"}, {"fullname": "src.global_planning.PrioritizedNode.priority", "modulename": "src.global_planning", "qualname": "PrioritizedNode.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.global_planning.PrioritizedNode.cost", "modulename": "src.global_planning", "qualname": "PrioritizedNode.cost", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.global_planning.PrioritizedNode.node", "modulename": "src.global_planning", "qualname": "PrioritizedNode.node", "kind": "variable", "doc": "<p></p>\n", "annotation": ": src.global_planning.Node"}, {"fullname": "src.global_planning.GlobalPlanner", "modulename": "src.global_planning", "qualname": "GlobalPlanner", "kind": "class", "doc": "<p>Abstract base class for global planners.\nThis class defines the interface for global path planning algorithms.\nIt provides methods to plan a path from an initial position to a goal position,\nand to get the appropriate planner based on the planner type.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.global_planning.GlobalPlanner.__init__", "modulename": "src.global_planning", "qualname": "GlobalPlanner.__init__", "kind": "function", "doc": "<p>Initialize the global planner with a map, initial position, and optional heuristic.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map (Map):</strong>  The map to use for planning.</li>\n<li><strong>initial_position (Tuple[int, int]):</strong>  The initial position of the robot, in map indices.</li>\n<li><strong>heuristic (str, optional):</strong>  The heuristic function to use for path planning. Defaults to None, which means no heuristic is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span>,</span><span class=\"param\">\t<span class=\"n\">initial_position</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.global_planning.GlobalPlanner.map", "modulename": "src.global_planning", "qualname": "GlobalPlanner.map", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.global_planning.GlobalPlanner.initial_position", "modulename": "src.global_planning", "qualname": "GlobalPlanner.initial_position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.global_planning.GlobalPlanner.initial_node", "modulename": "src.global_planning", "qualname": "GlobalPlanner.initial_node", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.global_planning.GlobalPlanner.heuristic", "modulename": "src.global_planning", "qualname": "GlobalPlanner.heuristic", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.global_planning.GlobalPlanner.plan", "modulename": "src.global_planning", "qualname": "GlobalPlanner.plan", "kind": "function", "doc": "<p>Plan a path from the initial position to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices. Default is the first goal position.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray[Point]: The planned path as an array of points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.GlobalPlanner.get_planner", "modulename": "src.global_planning", "qualname": "GlobalPlanner.get_planner", "kind": "function", "doc": "<p>Factory method to get the appropriate planner based on the planner type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>planner_algorithm (str):</strong>  The type of planner to create.</li>\n<li><strong>map (Map):</strong>  The map to use for planning.</li>\n<li><strong>initial_position (Tuple[int, int]):</strong>  The initial position of the robot, in map indices.</li>\n<li><strong>heuristic (str):</strong>  The heuristic function to use for path planning. Only needed for A* planner.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>GlobalPlanner: An instance of the specified planner type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">planner_algorithm</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span>,</span><span class=\"param\">\t<span class=\"n\">initial_position</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">global_planning</span><span class=\"o\">.</span><span class=\"n\">GlobalPlanner</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.GlobalPlanner.get_unused_goal_positions", "modulename": "src.global_planning", "qualname": "GlobalPlanner.get_unused_goal_positions", "kind": "function", "doc": "<p>Get the unused goal positions from the list of goal positions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_positions (List[Tuple[int, int]]):</strong>  The used goal position.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Tuple[int, int]]: The list of unused goal positions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.GlobalPlanner.get_heuristic", "modulename": "src.global_planning", "qualname": "GlobalPlanner.get_heuristic", "kind": "function", "doc": "<p>Get the heuristic function to use for path planning.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Callable: The heuristic function.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.BFSPlanner", "modulename": "src.global_planning", "qualname": "BFSPlanner", "kind": "class", "doc": "<p>Breadth-First Search (BFS) planner for global path planning.</p>\n", "bases": "GlobalPlanner"}, {"fullname": "src.global_planning.BFSPlanner.plan", "modulename": "src.global_planning", "qualname": "BFSPlanner.plan", "kind": "function", "doc": "<p>Plan a path from the initial position to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices. Default is the first goal position.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray[Point]: The planned path as an array of points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.DFSPlanner", "modulename": "src.global_planning", "qualname": "DFSPlanner", "kind": "class", "doc": "<p>Depth-First Search (DFS) planner for global path planning.</p>\n", "bases": "GlobalPlanner"}, {"fullname": "src.global_planning.DFSPlanner.plan", "modulename": "src.global_planning", "qualname": "DFSPlanner.plan", "kind": "function", "doc": "<p>Plan a path from the initial position to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices. Default is the first goal position.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray[Point]: The planned path as an array of points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.global_planning.AStarPlanner", "modulename": "src.global_planning", "qualname": "AStarPlanner", "kind": "class", "doc": "<p>A* planner for global path planning.</p>\n", "bases": "GlobalPlanner"}, {"fullname": "src.global_planning.AStarPlanner.__init__", "modulename": "src.global_planning", "qualname": "AStarPlanner.__init__", "kind": "function", "doc": "<p>Initialize the global planner with a map, initial position, and optional heuristic.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map (Map):</strong>  The map to use for planning.</li>\n<li><strong>initial_position (Tuple[int, int]):</strong>  The initial position of the robot, in map indices.</li>\n<li><strong>heuristic (str, optional):</strong>  The heuristic function to use for path planning. Defaults to None, which means no heuristic is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span>,</span><span class=\"param\">\t<span class=\"n\">initial_position</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.global_planning.AStarPlanner.plan", "modulename": "src.global_planning", "qualname": "AStarPlanner.plan", "kind": "function", "doc": "<p>Plan a path from the initial position to the goal position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>goal_position (List[Tuple[int, int]]):</strong>  The goal position to reach, in map indices. Default is the first goal position.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray[Point]: The planned path as an array of points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">goal_position</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.kinematics", "modulename": "src.kinematics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.forward_kinematics", "modulename": "src.kinematics", "qualname": "forward_kinematics", "kind": "function", "doc": "<p>Forward kinematics for a differential drive robot.\nThis function computes the new pose of a differential drive robot given its linear and angular velocities,\nthe last known pose, and the time step.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vt (float):</strong>  The linear velocity of the robot.</li>\n<li><strong>wt (float):</strong>  The angular velocity of the robot.</li>\n<li><strong>last_pose (np.ndarray):</strong>  The last known pose of the robot in the form [x, y, theta].</li>\n<li><strong>dt (float):</strong>  The time step over which the velocities are applied.</li>\n<li><strong>dtype (np.dtype, optional):</strong>  The data type for the output pose. Defaults to np.float64.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: The new pose of the robot after applying the velocities for the time step dt, in the form [x, y, theta].</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">wt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">last_pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\tdtype: numpy.dtype = &lt;class &#x27;numpy.float64&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.kinematics.PT2Block", "modulename": "src.kinematics", "qualname": "PT2Block", "kind": "class", "doc": "<p>Discrete PT2 Block approximated using the Tustin approximation.</p>\n"}, {"fullname": "src.kinematics.PT2Block.__init__", "modulename": "src.kinematics", "qualname": "PT2Block.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">D</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">kp</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">ts</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">buffer_length</span><span class=\"o\">=</span><span class=\"mi\">3</span></span>)</span>"}, {"fullname": "src.kinematics.PT2Block.k1", "modulename": "src.kinematics", "qualname": "PT2Block.k1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.k2", "modulename": "src.kinematics", "qualname": "PT2Block.k2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.k3", "modulename": "src.kinematics", "qualname": "PT2Block.k3", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.k4", "modulename": "src.kinematics", "qualname": "PT2Block.k4", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.k5", "modulename": "src.kinematics", "qualname": "PT2Block.k5", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.k6", "modulename": "src.kinematics", "qualname": "PT2Block.k6", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.e", "modulename": "src.kinematics", "qualname": "PT2Block.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.y", "modulename": "src.kinematics", "qualname": "PT2Block.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.kinematics.PT2Block.set_constants", "modulename": "src.kinematics", "qualname": "PT2Block.set_constants", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">T</span>, </span><span class=\"param\"><span class=\"n\">D</span>, </span><span class=\"param\"><span class=\"n\">kp</span>, </span><span class=\"param\"><span class=\"n\">ts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.kinematics.PT2Block.update", "modulename": "src.kinematics", "qualname": "PT2Block.update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning", "modulename": "src.local_planning", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement", "modulename": "src.local_planning", "qualname": "RobotMovement", "kind": "class", "doc": "<p>Class for local planning of a robot's movement towards a series of goals.\nThis class uses a PT2 block for velocity control and computes the robot's trajectory\nbased on the current pose and a set of goals.</p>\n"}, {"fullname": "src.local_planning.RobotMovement.__init__", "modulename": "src.local_planning", "qualname": "RobotMovement.__init__", "kind": "function", "doc": "<p>Initializes the RobotMovement class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>initial_pose (Pose):</strong>  Initial pose of the robot in the form of a Pose object.</li>\n<li><strong>goals (np.ndarray):</strong>  Array of goals where each goal is a Point with x, y coordinates.</li>\n<li><strong>time_step (float):</strong>  Time step for the PT2 block and trajectory calculations.</li>\n<li><strong>horizon (int):</strong>  Number of steps in the future to consider for trajectory planning.</li>\n<li><strong>velocity_publisher (RobotMovementEmitter):</strong>  Publisher for robot velocity messages.</li>\n<li><strong>trajectory_publisher (TrajectoryEmitter):</strong>  Publisher for local trajectory messages.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">initial_pose</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Pose</span>,</span><span class=\"param\">\t<span class=\"n\">goals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">horizon</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">velocity_publisher</span><span class=\"p\">:</span> <span class=\"n\">emission</span><span class=\"o\">.</span><span class=\"n\">RobotMovementEmitter</span>,</span><span class=\"param\">\t<span class=\"n\">trajectory_publisher</span><span class=\"p\">:</span> <span class=\"n\">emission</span><span class=\"o\">.</span><span class=\"n\">TrajectoryEmitter</span></span>)</span>"}, {"fullname": "src.local_planning.RobotMovement.tf_buffer", "modulename": "src.local_planning", "qualname": "RobotMovement.tf_buffer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.listener", "modulename": "src.local_planning", "qualname": "RobotMovement.listener", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.robot_pose", "modulename": "src.local_planning", "qualname": "RobotMovement.robot_pose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.goals", "modulename": "src.local_planning", "qualname": "RobotMovement.goals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.current_goal_index", "modulename": "src.local_planning", "qualname": "RobotMovement.current_goal_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.time_step", "modulename": "src.local_planning", "qualname": "RobotMovement.time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.pt2_block", "modulename": "src.local_planning", "qualname": "RobotMovement.pt2_block", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.horizon", "modulename": "src.local_planning", "qualname": "RobotMovement.horizon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.velocity_publisher", "modulename": "src.local_planning", "qualname": "RobotMovement.velocity_publisher", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.trajectory_publisher", "modulename": "src.local_planning", "qualname": "RobotMovement.trajectory_publisher", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.local_planning.RobotMovement.localize_robot", "modulename": "src.local_planning", "qualname": "RobotMovement.localize_robot", "kind": "function", "doc": "<p>Private method.\nLocalizes the robot by looking up its transform from the 'map' frame to the 'base_link' frame.\nThis method continuously attempts to retrieve the robot's pose until successful.\nIt updates the robot_pose attribute with the current position and orientation of the robot.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.get_goal_in_robot_coordinates", "modulename": "src.local_planning", "qualname": "RobotMovement.get_goal_in_robot_coordinates", "kind": "function", "doc": "<p>Private method.\nConverts the current goal pose from world coordinates to robot coordinates.\nThis method computes the transformation matrix from the robot's pose to the goal's pose\nand returns the goal pose in the robot's coordinate system.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: The goal pose in the robot's coordinate system as a numpy array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.get_pose_in_world_coordinates", "modulename": "src.local_planning", "qualname": "RobotMovement.get_pose_in_world_coordinates", "kind": "function", "doc": "<p>Private method.\nConverts a given pose from robot coordinates to world coordinates.\nThis method computes the transformation matrix from the robot's pose to the given pose\nand returns the pose in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pose (np.ndarray):</strong>  The pose in robot coordinates as a numpy array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: The pose in world coordinates as a numpy array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.create_vt_and_wt", "modulename": "src.local_planning", "qualname": "RobotMovement.create_vt_and_wt", "kind": "function", "doc": "<p>Private method.\nCreates a list of tuples representing possible forward velocities (vt) and angular velocities (wt).</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Tuple[float, float]]: A list of tuples where each tuple contains a linear velocity and an angular velocity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.cost_function", "modulename": "src.local_planning", "qualname": "RobotMovement.cost_function", "kind": "function", "doc": "<p>Private method.\nComputes the cost of a given pose relative to the goal pose and control input.\nThis function calculates the error in position and orientation between the current pose and the goal pose,\nand applies a weighted sum to compute the cost. The velocity is also considered in the cost calculation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pose (np.ndarray):</strong>  Position and orientation of the robot in the form of a numpy array.</li>\n<li><strong>goal_pose (np.ndarray):</strong>  Goal position and orientation in the form of a numpy array.</li>\n<li><strong>control (np.ndarray):</strong>  Velocity in the form of a numpy array, containing linear and angular components.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The computed cost as a float value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">goal_pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.is_goal_reached", "modulename": "src.local_planning", "qualname": "RobotMovement.is_goal_reached", "kind": "function", "doc": "<p>Private method.\nChecks if the robot has reached the current goal pose.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the robot is within a threshold distance from the goal pose, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">goal_pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.local_planning.RobotMovement.run", "modulename": "src.local_planning", "qualname": "RobotMovement.run", "kind": "function", "doc": "<p>The main method that runs the local planning algorithm.\nIt continuously checks if the robot has reached the current goal pose and updates the robot's trajectory\ntowards the goal using a PT2 block for velocity control.\nThe method iterates through the goals, localizing the robot and computing the optimal control inputs\nto minimize the cost function until all goals are reached.\nThe trajectory is published at each step, and the robot's velocity is updated accordingly.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.localization", "modulename": "src.localization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.localization.get_map", "modulename": "src.localization", "qualname": "get_map", "kind": "function", "doc": "<p>Get the map from the map server.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>OccupancyGrid: one-dimensional array of the map</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">nav_msgs</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">_OccupancyGrid</span><span class=\"o\">.</span><span class=\"n\">OccupancyGrid</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.localization.deserialize_map", "modulename": "src.localization", "qualname": "deserialize_map", "kind": "function", "doc": "<p>Deserialize the map into a 2D array.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (OccupancyGrid):</strong>  one-dimensional array of the map</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Map: deserialized map object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">nav_msgs</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">_OccupancyGrid</span><span class=\"o\">.</span><span class=\"n\">OccupancyGrid</span></span><span class=\"return-annotation\">) -> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.localization.get_laser_scan", "modulename": "src.localization", "qualname": "get_laser_scan", "kind": "function", "doc": "<p>Get the laser scan data from the robot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map_resolution (float):</strong>  resolution of the map</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LaserScan: laser scan data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">map_resolution</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.localization.predict_robot_position", "modulename": "src.localization", "qualname": "predict_robot_position", "kind": "function", "doc": "<p>Predict the robot position based on the laser scan data, using K-Nearest Neighbors (kNN) algorithm.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map (Map):</strong>  map object containing the map data</li>\n<li><strong>laser_scan (np.ndarray):</strong>  laser scan data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[Tuple[int, int], Point]: predicted robot position in map indices and world coordinates</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span>,</span><span class=\"param\">\t<span class=\"n\">laser_scan</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Point</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.main", "modulename": "src.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.matrix_manipulation", "modulename": "src.matrix_manipulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.matrix_manipulation.pose_to_tf_matrix", "modulename": "src.matrix_manipulation", "qualname": "pose_to_tf_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pose</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.matrix_manipulation.tf_matrix_to_pose", "modulename": "src.matrix_manipulation", "qualname": "tf_matrix_to_pose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mat</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.matrix_manipulation.inverse_matrix", "modulename": "src.matrix_manipulation", "qualname": "inverse_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.visualization", "modulename": "src.visualization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.visualization.COLORS", "modulename": "src.visualization", "qualname": "COLORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;darkblue&#x27;: &#x27;#143049&#x27;, &#x27;twblue&#x27;: &#x27;#00649C&#x27;, &#x27;lightblue&#x27;: &#x27;#8DA3B3&#x27;, &#x27;lightgrey&#x27;: &#x27;#CBC0D5&#x27;, &#x27;twgrey&#x27;: &#x27;#72777A&#x27;}"}, {"fullname": "src.visualization.Plotter", "modulename": "src.visualization", "qualname": "Plotter", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.visualization.Plotter.with_size", "modulename": "src.visualization", "qualname": "Plotter.with_size", "kind": "function", "doc": "<p>Set the figure size.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>width (float):</strong>  width of the figure, in inches</li>\n<li><strong>height (float):</strong>  height of the figure, in inches</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_map", "modulename": "src.visualization", "qualname": "Plotter.with_map", "kind": "function", "doc": "<p>Plot the map in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map (Map):</strong>  map object containing the map data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_costmap", "modulename": "src.visualization", "qualname": "Plotter.with_costmap", "kind": "function", "doc": "<p>Plot the costmap in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map (Map):</strong>  map object containing the costmap data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">map</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Map</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_laser_scan", "modulename": "src.visualization", "qualname": "Plotter.with_laser_scan", "kind": "function", "doc": "<p>Plot the laser scan data in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>laser_scan (np.ndarray):</strong>  laser scan data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">laser_scan</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_robot", "modulename": "src.visualization", "qualname": "Plotter.with_robot", "kind": "function", "doc": "<p>Plot the robot position in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>robot_position (Point):</strong>  robot position in world coordinates</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">robot_position</span><span class=\"p\">:</span> <span class=\"n\">custom_types</span><span class=\"o\">.</span><span class=\"n\">Point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_global_plan", "modulename": "src.visualization", "qualname": "Plotter.with_global_plan", "kind": "function", "doc": "<p>Plot the global path in world coordinates.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>global_path (np.ndarray):</strong>  global path as an array of points</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">global_path</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_title", "modulename": "src.visualization", "qualname": "Plotter.with_title", "kind": "function", "doc": "<p>Set the title of the plot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>title (str):</strong>  title of the plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_labels", "modulename": "src.visualization", "qualname": "Plotter.with_labels", "kind": "function", "doc": "<p>Set the labels of the plot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xlabel (str):</strong>  x-axis label</li>\n<li><strong>ylabel (str):</strong>  y-axis label</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_ticks", "modulename": "src.visualization", "qualname": "Plotter.with_ticks", "kind": "function", "doc": "<p>Set the ticks of the plot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xticks (np.ndarray):</strong>  x-axis ticks</li>\n<li><strong>yticks (np.ndarray):</strong>  y-axis ticks</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xticks</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">yticks</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.with_grid", "modulename": "src.visualization", "qualname": "Plotter.with_grid", "kind": "function", "doc": "<p>Set the grid of the plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.visualization.Plotter.show", "modulename": "src.visualization", "qualname": "Plotter.show", "kind": "function", "doc": "<p>Show the plot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();